service: realtime-covid19

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  environment:
    ${file(./config/env.${self:provider.stage}.json)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:CreateQueue
        - sqs:ReceiveMessage
      Resource: ${self:custom.sqsArn}
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:DescribeTable
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DAILY_TABLE}"  

custom:
  sqsArn:
    Fn::GetAtt:
      - SQSQueue
      - Arn

  schedulerRate: rate(12 hours)
  enabled: true

  localstack:
    stages:
      - local
    # AUTOMAGIC: desabilitar o localstack no deploy
    autostart: false

  serverless-offline:
    useChildProcesses: true

package:
  individually: true 
  excludeDevDependencies: true

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}
        VisibilityTimeout: 60
    DAILYTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DAILY_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  scheduler:
    handler: src/index.scheduler
    events:
      - schedule:
          rate: ${self:custom.schedulerRate}
          name: schedule-read-file-${self:provider.stage}
          description: Read covid19 csv file each 12 hours
          enabled: ${self:custom.enabled}
 
  s3listener:
    handler: src/index.s3listener  
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  sqslistener:
    handler: src/index.sqslistener
    events:
       - sqs:
          batchSize: 1
          arn: ${self:custom.sqsArn}

plugins:
  - serverless-localstack
  - serverless-dynamodb-local
  - serverless-offline